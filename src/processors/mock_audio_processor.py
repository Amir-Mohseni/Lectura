import logging
import os
from pathlib import Path
from typing import Dict, Any, List

logger = logging.getLogger("lectura.processors.mock_audio")

class MockAudioProcessor:
    """A mock implementation of the AudioProcessor for testing"""
    
    def __init__(self):
        """Initialize the mock audio processor"""
        logger.info("Initializing MockAudioProcessor")
        self.model_loaded = True
    
    def transcribe_audio(self, audio_path: str, language: str = "en") -> Dict[str, Any]:
        """Mock transcription of audio file
        
        Args:
            audio_path (str): Path to the audio file
            language (str): Language code (e.g., "en" for English)
            
        Returns:
            Dict: Mock transcription results
        """
        logger.info(f"Mock transcribing audio file: {audio_path}")
        
        audio_path = Path(audio_path)
        if not audio_path.exists():
            logger.error(f"Audio file not found: {audio_path}")
            raise FileNotFoundError(f"Audio file not found: {audio_path}")
        
        # Get file size for logging
        file_size_mb = audio_path.stat().st_size / (1024 * 1024)
        logger.info(f"Audio file size: {file_size_mb:.2f} MB")
        
        # Create a mock transcript based on the file name
        file_name = audio_path.stem
        mock_transcript = f"This is a mock transcript for the file {file_name}. "
        mock_transcript += "It contains some sample text that would normally be generated by the Whisper model. "
        mock_transcript += "The actual content would depend on the audio file, but for testing purposes, "
        mock_transcript += "we're using this placeholder text instead."
        
        # Create mock chunks
        mock_chunks = [
            {"timestamp": (0.0, 5.0), "text": "This is a mock transcript for the file"},
            {"timestamp": (5.0, 10.0), "text": f"{file_name}."},
            {"timestamp": (10.0, 15.0), "text": "It contains some sample text that would normally be generated by the Whisper model."},
            {"timestamp": (15.0, 20.0), "text": "The actual content would depend on the audio file, but for testing purposes,"},
            {"timestamp": (20.0, 25.0), "text": "we're using this placeholder text instead."}
        ]
        
        # Create the transcript object
        transcript = {
            "text": mock_transcript,
            "language": language,
            "chunks": mock_chunks
        }
        
        logger.info(f"Mock transcription completed: {len(transcript['text'])} characters, {len(transcript['chunks'])} chunks")
        return transcript 